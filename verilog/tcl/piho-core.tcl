#*****************************************************************************************
# Vivado (TM) v2019.1 (64-bit)
#
# piho-core.tcl: Tcl script for re-creating project 'piho-core'
#
# Generated by Vivado on Sat Feb 15 22:11:39 CST 2020
# IP Build 2548770 on Fri May 24 18:01:18 MDT 2019
#
# This file contains the Vivado Tcl commands for re-creating the project to the state*
# when this script was generated. In order to re-create the project, please source this
# file in the Vivado Tcl Shell.
#
# * Note that the runs in the created project will be configured the same way as the
#   original project, however they will not be launched automatically. To regenerate the
#   run results please launch the synthesis/implementation runs as needed.
#
#*****************************************************************************************
# NOTE: In order to use this script for source control purposes, please make sure that the
#       following files are added to the source control system:-
#
# 1. This project restoration tcl script (piho-core.tcl) that was generated.
#
# 2. The following source(s) files that were local or imported into the original project.
#    (Please see the '$orig_proj_dir' and '$origin_dir' variable setting below at the start of the script)
#
#    "/home/petergu/MyHome/Working/fpga-mcmc/piho-on-chip-2019.1/piho-core/piho-core.srcs/sources_1/ip/mult_gen_0/mult_gen_0.xci"
#    "/home/petergu/MyHome/Working/fpga-mcmc/piho-on-chip-2019.1/piho-core/piho-core.srcs/sources_1/ip/blk_mem_gen_small_0/blk_mem_gen_small_0.xci"
#    "/home/petergu/MyHome/Working/fpga-mcmc/piho-on-chip-2019.1/piho-core/piho-core.srcs/sources_1/bd/bd_math/hdl/bd_math_wrapper.v"
#    "/home/petergu/MyHome/Working/fpga-mcmc/piho-on-chip-2019.1/piho-core/piho-core.srcs/sources_1/ip/blk_mem_gen_0/blk_mem_gen_0.xci"
#    "/home/petergu/MyHome/Working/fpga-mcmc/piho-on-chip-2019.1/piho-core/piho-core.srcs/sources_1/ip/blk_mem_gen_1/blk_mem_gen_1.xci"
#
# 3. The following remote source files that were added to the original project:-
#
#    "/home/petergu/MyHome/Working/fpga-mcmc/verilog/src/lfsr.v"
#    "/home/petergu/MyHome/Working/fpga-mcmc/verilog/src/piho_unit.v"
#    "/home/petergu/MyHome/Working/fpga-mcmc/verilog/src/randlog.v"
#    "/home/petergu/MyHome/Working/fpga-mcmc/verilog/src/piho_top_real.v"
#    "/home/petergu/MyHome/Working/fpga-mcmc/verilog/src/piho_top.v"
#    "/home/petergu/MyHome/Working/fpga-mcmc/verilog/coe/exp.coe"
#    "/home/petergu/MyHome/Working/fpga-mcmc/verilog/coe/bram_small.coe"
#    "/home/petergu/MyHome/Working/fpga-mcmc/verilog/src/piho_unit.bak.v"
#    "/home/petergu/MyHome/Working/fpga-mcmc/piho-on-chip-2019.1/component.xml"
#    "/home/petergu/MyHome/Working/fpga-mcmc/verilog/sim/piho_unit_tb.v"
#    "/home/petergu/MyHome/Working/fpga-mcmc/verilog/sim/piho_unit_0_tb.v"
#    "/home/petergu/MyHome/Working/fpga-mcmc/verilog/sim/piho_real_tb.v"
#    "/home/petergu/MyHome/Working/fpga-mcmc/verilog/sim/randlog_tb.v"
#    "/home/petergu/MyHome/Working/fpga-mcmc/verilog/sim/actioncalc_tb.v"
#    "/home/petergu/MyHome/Working/fpga-mcmc/verilog/sim/piho_tb.v"
#    "/home/petergu/MyHome/Working/fpga-mcmc/verilog/sim/dram_tb.v"
#
#*****************************************************************************************

# Set the reference directory for source file relative paths (by default the value is script directory path)
set origin_dir "."

# Use origin directory path location variable, if specified in the tcl shell
if { [info exists ::origin_dir_loc] } {
  set origin_dir $::origin_dir_loc
}

# Set the project name
set _xil_proj_name_ "piho-core"

# Use project name variable, if specified in the tcl shell
if { [info exists ::user_project_name] } {
  set _xil_proj_name_ $::user_project_name
}

variable script_file
set script_file "piho-core.tcl"

# Help information for this script
proc print_help {} {
  variable script_file
  puts "\nDescription:"
  puts "Recreate a Vivado project from this script. The created project will be"
  puts "functionally equivalent to the original project for which this script was"
  puts "generated. The script contains commands for creating a project, filesets,"
  puts "runs, adding/importing sources and setting properties on various objects.\n"
  puts "Syntax:"
  puts "$script_file"
  puts "$script_file -tclargs \[--origin_dir <path>\]"
  puts "$script_file -tclargs \[--project_name <name>\]"
  puts "$script_file -tclargs \[--help\]\n"
  puts "Usage:"
  puts "Name                   Description"
  puts "-------------------------------------------------------------------------"
  puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
  puts "                       origin_dir path value is \".\", otherwise, the value"
  puts "                       that was set with the \"-paths_relative_to\" switch"
  puts "                       when this script was generated.\n"
  puts "\[--project_name <name>\] Create project with the specified name. Default"
  puts "                       name is the name of the project from where this"
  puts "                       script was generated.\n"
  puts "\[--help\]               Print help information for this script"
  puts "-------------------------------------------------------------------------\n"
  exit 0
}

if { $::argc > 0 } {
  for {set i 0} {$i < $::argc} {incr i} {
    set option [string trim [lindex $::argv $i]]
    switch -regexp -- $option {
      "--origin_dir"   { incr i; set origin_dir [lindex $::argv $i] }
      "--project_name" { incr i; set _xil_proj_name_ [lindex $::argv $i] }
      "--help"         { print_help }
      default {
        if { [regexp {^-} $option] } {
          puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
          return 1
        }
      }
    }
  }
}

# Set the directory path for the original project from where this script was exported
set orig_proj_dir "[file normalize "$origin_dir/../../piho-on-chip-2019.1/piho-core"]"

# Create project
create_project ${_xil_proj_name_} ./${_xil_proj_name_} -part xc7z020clg400-1

# Set the directory path for the new project
set proj_dir [get_property directory [current_project]]

# Set project properties
set obj [current_project]
set_property -name "board_part" -value "www.digilentinc.com:pynq-z1:part0:1.0" -objects $obj
set_property -name "default_lib" -value "xil_defaultlib" -objects $obj
set_property -name "dsa.accelerator_binary_content" -value "bitstream" -objects $obj
set_property -name "dsa.accelerator_binary_format" -value "xclbin2" -objects $obj
set_property -name "dsa.board_id" -value "pynq-z1" -objects $obj
set_property -name "dsa.description" -value "Vivado generated DSA" -objects $obj
set_property -name "dsa.dr_bd_base_address" -value "0" -objects $obj
set_property -name "dsa.emu_dir" -value "emu" -objects $obj
set_property -name "dsa.flash_interface_type" -value "bpix16" -objects $obj
set_property -name "dsa.flash_offset_address" -value "0" -objects $obj
set_property -name "dsa.flash_size" -value "1024" -objects $obj
set_property -name "dsa.host_architecture" -value "x86_64" -objects $obj
set_property -name "dsa.host_interface" -value "pcie" -objects $obj
set_property -name "dsa.num_compute_units" -value "60" -objects $obj
set_property -name "dsa.platform_state" -value "pre_synth" -objects $obj
set_property -name "dsa.vendor" -value "xilinx" -objects $obj
set_property -name "dsa.version" -value "0.0" -objects $obj
set_property -name "enable_vhdl_2008" -value "1" -objects $obj
set_property -name "ip_cache_permissions" -value "read write" -objects $obj
set_property -name "ip_output_repo" -value "$proj_dir/${_xil_proj_name_}.cache/ip" -objects $obj
set_property -name "mem.enable_memory_map_generation" -value "1" -objects $obj
set_property -name "sim.central_dir" -value "$proj_dir/${_xil_proj_name_}.ip_user_files" -objects $obj
set_property -name "sim.ip.auto_export_scripts" -value "1" -objects $obj
set_property -name "simulator_language" -value "Mixed" -objects $obj
set_property -name "target_simulator" -value "Xcelium" -objects $obj
set_property -name "webtalk.activehdl_export_sim" -value "55" -objects $obj
set_property -name "webtalk.ies_export_sim" -value "55" -objects $obj
set_property -name "webtalk.modelsim_export_sim" -value "55" -objects $obj
set_property -name "webtalk.questa_export_sim" -value "55" -objects $obj
set_property -name "webtalk.riviera_export_sim" -value "55" -objects $obj
set_property -name "webtalk.vcs_export_sim" -value "55" -objects $obj
set_property -name "webtalk.xsim_export_sim" -value "55" -objects $obj
set_property -name "webtalk.xsim_launch_sim" -value "231" -objects $obj
set_property -name "xpm_libraries" -value "XPM_MEMORY" -objects $obj

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

# Set IP repository paths
set obj [get_filesets sources_1]
set_property "ip_repo_paths" "[file normalize "$origin_dir/../../piho-on-chip-2019.1"] [file normalize "$origin_dir/../../piho-on-chip-2019.1/delaypass"]" $obj

# Rebuild user ip_repo's index before adding any source files
update_ip_catalog -rebuild

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/../src/lfsr.v"] \
 [file normalize "${origin_dir}/../src/piho_unit.v"] \
 [file normalize "${origin_dir}/../src/randlog.v"] \
 [file normalize "${origin_dir}/../src/piho_top_real.v"] \
 [file normalize "${origin_dir}/../src/piho_top.v"] \
 [file normalize "${origin_dir}/../coe/exp.coe"] \
 [file normalize "${origin_dir}/../coe/bram_small.coe"] \
 [file normalize "${origin_dir}/../src/piho_unit.bak.v"] \
 [file normalize "${origin_dir}/../../piho-on-chip-2019.1/component.xml"] \
]
add_files -norecurse -fileset $obj $files

# Import local files from the original project
set files [list \
 [file normalize "${origin_dir}/../../piho-on-chip-2019.1/piho-core/piho-core.srcs/sources_1/ip/mult_gen_0/mult_gen_0.xci" ]\
 [file normalize "${origin_dir}/../../piho-on-chip-2019.1/piho-core/piho-core.srcs/sources_1/ip/blk_mem_gen_small_0/blk_mem_gen_small_0.xci" ]\
 [file normalize "${origin_dir}/../../piho-on-chip-2019.1/piho-core/piho-core.srcs/sources_1/bd/bd_math/hdl/bd_math_wrapper.v" ]\
]
set imported_files [import_files -fileset sources_1 $files]

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/../../piho-on-chip-2019.1/component.xml"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "IP-XACT" -objects $file_obj


# Set 'sources_1' fileset file properties for local files
set file "mult_gen_0/mult_gen_0.xci"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "generate_synth_checkpoint" -value "0" -objects $file_obj
}
set_property -name "registered_with_manager" -value "1" -objects $file_obj

set file "blk_mem_gen_small_0/blk_mem_gen_small_0.xci"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "generate_synth_checkpoint" -value "0" -objects $file_obj
}
set_property -name "registered_with_manager" -value "1" -objects $file_obj


# Set 'sources_1' fileset properties
set obj [get_filesets sources_1]
set_property -name "top" -value "piho_top_real" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
# Import local files from the original project
set files [list \
 [file normalize "${origin_dir}/../../piho-on-chip-2019.1/piho-core/piho-core.srcs/sources_1/ip/blk_mem_gen_0/blk_mem_gen_0.xci" ]\
]
set imported_files [import_files -fileset sources_1 $files]

# Set 'sources_1' fileset file properties for remote files
# None

# Set 'sources_1' fileset file properties for local files
set file "blk_mem_gen_0/blk_mem_gen_0.xci"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Create 'blk_mem_gen_1' fileset (if not found)
if {[string equal [get_filesets -quiet blk_mem_gen_1] ""]} {
  create_fileset -blockset blk_mem_gen_1
}

# Set 'blk_mem_gen_1' fileset object
set obj [get_filesets blk_mem_gen_1]
# Import local files from the original project
set files [list \
 [file normalize "${origin_dir}/../../piho-on-chip-2019.1/piho-core/piho-core.srcs/sources_1/ip/blk_mem_gen_1/blk_mem_gen_1.xci" ]\
]
set imported_files [import_files -fileset blk_mem_gen_1 $files]

# Set 'blk_mem_gen_1' fileset file properties for remote files
# None

# Set 'blk_mem_gen_1' fileset file properties for local files
set file "blk_mem_gen_1/blk_mem_gen_1.xci"
set file_obj [get_files -of_objects [get_filesets blk_mem_gen_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj


# Set 'blk_mem_gen_1' fileset properties
set obj [get_filesets blk_mem_gen_1]
set_property -name "top" -value "blk_mem_gen_1" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj

# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
  create_fileset -constrset constrs_1
}

# Set 'constrs_1' fileset object
set obj [get_filesets constrs_1]

# Empty (no sources present)

# Set 'constrs_1' fileset properties
set obj [get_filesets constrs_1]

# Create 'sim_1' fileset (if not found)
if {[string equal [get_filesets -quiet sim_1] ""]} {
  create_fileset -simset sim_1
}

# Set 'sim_1' fileset object
set obj [get_filesets sim_1]
set files [list \
 [file normalize "${origin_dir}/../sim/piho_unit_tb.v"] \
 [file normalize "${origin_dir}/../sim/piho_unit_0_tb.v"] \
 [file normalize "${origin_dir}/../sim/piho_real_tb.v"] \
 [file normalize "${origin_dir}/../sim/randlog_tb.v"] \
 [file normalize "${origin_dir}/../sim/actioncalc_tb.v"] \
 [file normalize "${origin_dir}/../sim/piho_tb.v"] \
 [file normalize "${origin_dir}/../sim/dram_tb.v"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sim_1' fileset file properties for remote files
# None

# Set 'sim_1' fileset file properties for local files
# None

# Set 'sim_1' fileset properties
set obj [get_filesets sim_1]
set_property -name "nl.mode" -value "funcsim" -objects $obj
set_property -name "top" -value "piho_unit_testbench" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj
set_property -name "top_lib" -value "xil_defaultlib" -objects $obj
set_property -name "xsim.simulate.runtime" -value "200000ns" -objects $obj

# Set 'utils_1' fileset object
set obj [get_filesets utils_1]
# Empty (no sources present)

# Set 'utils_1' fileset properties
set obj [get_filesets utils_1]


# Adding sources referenced in BDs, if not already added


# Proc to create BD bd_math
proc cr_bd_bd_math { parentCell } {

  # CHANGE DESIGN NAME HERE
  set design_name bd_math

  common::send_msg_id "BD_TCL-003" "INFO" "Currently there is no design <$design_name> in project, so creating one..."

  create_bd_design $design_name

  set bCheckIPsPassed 1
  ##################################################################
  # CHECK IPs
  ##################################################################
  set bCheckIPs 1
  if { $bCheckIPs == 1 } {
     set list_check_ips "\ 
  xilinx.com:ip:c_addsub:12.0\
  user.org:user:delaypass:1.0\
  xilinx.com:ip:mult_gen:12.0\
  xilinx.com:ip:xlconstant:1.1\
  "

   set list_ips_missing ""
   common::send_msg_id "BD_TCL-006" "INFO" "Checking if the following IPs exist in the project's IP catalog: $list_check_ips ."

   foreach ip_vlnv $list_check_ips {
      set ip_obj [get_ipdefs -all $ip_vlnv]
      if { $ip_obj eq "" } {
         lappend list_ips_missing $ip_vlnv
      }
   }

   if { $list_ips_missing ne "" } {
      catch {common::send_msg_id "BD_TCL-115" "ERROR" "The following IPs are not found in the IP Catalog:\n  $list_ips_missing\n\nResolution: Please add the repository containing the IP(s) to the project." }
      set bCheckIPsPassed 0
   }

  }

  if { $bCheckIPsPassed != 1 } {
    common::send_msg_id "BD_TCL-1003" "WARNING" "Will not continue with creation of design due to the error(s) above."
    return 3
  }

  variable script_folder

  if { $parentCell eq "" } {
     set parentCell [get_bd_cells /]
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj


  # Create interface ports

  # Create ports
  set a [ create_bd_port -dir I -from 31 -to 0 a ]
  set arev [ create_bd_port -dir I -from 31 -to 0 arev ]
  set clk [ create_bd_port -dir I -type clk clk ]
  set_property -dict [ list \
   CONFIG.FREQ_HZ {100000000} \
 ] $clk
  set inc [ create_bd_port -dir I -from 31 -to 0 inc ]
  set o [ create_bd_port -dir O -from 31 -to 0 o ]
  set x [ create_bd_port -dir I -from 31 -to 0 x ]
  set xm [ create_bd_port -dir I -from 31 -to 0 xm ]
  set xp [ create_bd_port -dir I -from 31 -to 0 xp ]

  # Create instance: c_add_0, and set properties
  set c_add_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:c_addsub:12.0 c_add_0 ]
  set_property -dict [ list \
   CONFIG.A_Type {Signed} \
   CONFIG.A_Width {32} \
   CONFIG.B_Constant {false} \
   CONFIG.B_Type {Signed} \
   CONFIG.B_Value {00000000000000000000000000000000} \
   CONFIG.B_Width {32} \
   CONFIG.CE {false} \
   CONFIG.Implementation {Fabric} \
   CONFIG.Latency {1} \
   CONFIG.Latency_Configuration {Manual} \
   CONFIG.Out_Width {32} \
 ] $c_add_0

  # Create instance: c_add_1, and set properties
  set c_add_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:c_addsub:12.0 c_add_1 ]
  set_property -dict [ list \
   CONFIG.A_Type {Signed} \
   CONFIG.A_Width {32} \
   CONFIG.B_Constant {false} \
   CONFIG.B_Type {Signed} \
   CONFIG.B_Value {00000000000000000000000000000000} \
   CONFIG.B_Width {32} \
   CONFIG.CE {false} \
   CONFIG.Implementation {Fabric} \
   CONFIG.Latency {1} \
   CONFIG.Latency_Configuration {Manual} \
   CONFIG.Out_Width {32} \
 ] $c_add_1

  # Create instance: c_add_2, and set properties
  set c_add_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:c_addsub:12.0 c_add_2 ]
  set_property -dict [ list \
   CONFIG.A_Type {Signed} \
   CONFIG.A_Width {32} \
   CONFIG.B_Constant {false} \
   CONFIG.B_Type {Signed} \
   CONFIG.B_Value {00000000000000000000000000000000} \
   CONFIG.B_Width {32} \
   CONFIG.CE {false} \
   CONFIG.Implementation {DSP48} \
   CONFIG.Latency {1} \
   CONFIG.Latency_Configuration {Manual} \
   CONFIG.Out_Width {32} \
 ] $c_add_2

  # Create instance: c_add_4, and set properties
  set c_add_4 [ create_bd_cell -type ip -vlnv xilinx.com:ip:c_addsub:12.0 c_add_4 ]
  set_property -dict [ list \
   CONFIG.A_Type {Signed} \
   CONFIG.A_Width {32} \
   CONFIG.B_Constant {false} \
   CONFIG.B_Type {Signed} \
   CONFIG.B_Value {00000000000000000000000000000000} \
   CONFIG.B_Width {32} \
   CONFIG.CE {false} \
   CONFIG.Implementation {DSP48} \
   CONFIG.Latency {1} \
   CONFIG.Latency_Configuration {Manual} \
   CONFIG.Out_Width {32} \
 ] $c_add_4

  # Create instance: c_add_5, and set properties
  set c_add_5 [ create_bd_cell -type ip -vlnv xilinx.com:ip:c_addsub:12.0 c_add_5 ]
  set_property -dict [ list \
   CONFIG.A_Type {Signed} \
   CONFIG.A_Width {32} \
   CONFIG.B_Constant {false} \
   CONFIG.B_Type {Signed} \
   CONFIG.B_Value {00000000000000000000000000000000} \
   CONFIG.B_Width {32} \
   CONFIG.CE {false} \
   CONFIG.Implementation {DSP48} \
   CONFIG.Latency {1} \
   CONFIG.Latency_Configuration {Manual} \
   CONFIG.Out_Width {32} \
 ] $c_add_5

  # Create instance: c_sub_6, and set properties
  set c_sub_6 [ create_bd_cell -type ip -vlnv xilinx.com:ip:c_addsub:12.0 c_sub_6 ]
  set_property -dict [ list \
   CONFIG.A_Type {Signed} \
   CONFIG.A_Width {32} \
   CONFIG.Add_Mode {Subtract} \
   CONFIG.B_Constant {false} \
   CONFIG.B_Type {Signed} \
   CONFIG.B_Value {00000000000000000000000000000000} \
   CONFIG.B_Width {32} \
   CONFIG.CE {false} \
   CONFIG.Implementation {DSP48} \
   CONFIG.Latency {1} \
   CONFIG.Latency_Configuration {Manual} \
   CONFIG.Out_Width {32} \
 ] $c_sub_6

  # Create instance: delaypass_0, and set properties
  set delaypass_0 [ create_bd_cell -type ip -vlnv user.org:user:delaypass:1.0 delaypass_0 ]

  # Create instance: delaypass_1, and set properties
  set delaypass_1 [ create_bd_cell -type ip -vlnv user.org:user:delaypass:1.0 delaypass_1 ]

  # Create instance: delaypass_2, and set properties
  set delaypass_2 [ create_bd_cell -type ip -vlnv user.org:user:delaypass:1.0 delaypass_2 ]

  # Create instance: delaypass_3, and set properties
  set delaypass_3 [ create_bd_cell -type ip -vlnv user.org:user:delaypass:1.0 delaypass_3 ]

  # Create instance: delaypass_4, and set properties
  set delaypass_4 [ create_bd_cell -type ip -vlnv user.org:user:delaypass:1.0 delaypass_4 ]

  # Create instance: delaypass_5, and set properties
  set delaypass_5 [ create_bd_cell -type ip -vlnv user.org:user:delaypass:1.0 delaypass_5 ]

  # Create instance: delaypass_6, and set properties
  set delaypass_6 [ create_bd_cell -type ip -vlnv user.org:user:delaypass:1.0 delaypass_6 ]

  # Create instance: delaypass_7, and set properties
  set delaypass_7 [ create_bd_cell -type ip -vlnv user.org:user:delaypass:1.0 delaypass_7 ]

  # Create instance: delaypass_8, and set properties
  set delaypass_8 [ create_bd_cell -type ip -vlnv user.org:user:delaypass:1.0 delaypass_8 ]

  # Create instance: delaypass_9, and set properties
  set delaypass_9 [ create_bd_cell -type ip -vlnv user.org:user:delaypass:1.0 delaypass_9 ]

  # Create instance: delaypass_10, and set properties
  set delaypass_10 [ create_bd_cell -type ip -vlnv user.org:user:delaypass:1.0 delaypass_10 ]

  # Create instance: delaypass_11, and set properties
  set delaypass_11 [ create_bd_cell -type ip -vlnv user.org:user:delaypass:1.0 delaypass_11 ]

  # Create instance: delaypass_12, and set properties
  set delaypass_12 [ create_bd_cell -type ip -vlnv user.org:user:delaypass:1.0 delaypass_12 ]

  # Create instance: delaypass_13, and set properties
  set delaypass_13 [ create_bd_cell -type ip -vlnv user.org:user:delaypass:1.0 delaypass_13 ]

  # Create instance: mult_64_1, and set properties
  set mult_64_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:mult_gen:12.0 mult_64_1 ]
  set_property -dict [ list \
   CONFIG.Multiplier_Construction {Use_Mults} \
   CONFIG.OptGoal {Area} \
   CONFIG.OutputWidthHigh {47} \
   CONFIG.OutputWidthLow {16} \
   CONFIG.PipeStages {1} \
   CONFIG.PortAType {Signed} \
   CONFIG.PortAWidth {32} \
   CONFIG.PortBType {Signed} \
   CONFIG.PortBWidth {32} \
   CONFIG.Use_Custom_Output_Width {true} \
 ] $mult_64_1

  # Create instance: mult_64_2_pip_2, and set properties
  set mult_64_2_pip_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:mult_gen:12.0 mult_64_2_pip_2 ]
  set_property -dict [ list \
   CONFIG.Multiplier_Construction {Use_Mults} \
   CONFIG.OptGoal {Area} \
   CONFIG.OutputWidthHigh {47} \
   CONFIG.OutputWidthLow {16} \
   CONFIG.PipeStages {2} \
   CONFIG.PortAType {Signed} \
   CONFIG.PortAWidth {32} \
   CONFIG.PortBType {Signed} \
   CONFIG.PortBWidth {32} \
   CONFIG.Use_Custom_Output_Width {true} \
 ] $mult_64_2_pip_2

  # Create instance: mult_64_3, and set properties
  set mult_64_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:mult_gen:12.0 mult_64_3 ]
  set_property -dict [ list \
   CONFIG.Multiplier_Construction {Use_Mults} \
   CONFIG.OptGoal {Area} \
   CONFIG.OutputWidthHigh {47} \
   CONFIG.OutputWidthLow {16} \
   CONFIG.PipeStages {1} \
   CONFIG.PortAType {Signed} \
   CONFIG.PortAWidth {32} \
   CONFIG.PortBType {Signed} \
   CONFIG.PortBWidth {32} \
   CONFIG.Use_Custom_Output_Width {true} \
 ] $mult_64_3

  # Create instance: mult_64_4, and set properties
  set mult_64_4 [ create_bd_cell -type ip -vlnv xilinx.com:ip:mult_gen:12.0 mult_64_4 ]
  set_property -dict [ list \
   CONFIG.Multiplier_Construction {Use_Mults} \
   CONFIG.OptGoal {Area} \
   CONFIG.OutputWidthHigh {47} \
   CONFIG.OutputWidthLow {16} \
   CONFIG.PipeStages {1} \
   CONFIG.PortAType {Signed} \
   CONFIG.PortAWidth {32} \
   CONFIG.PortBType {Signed} \
   CONFIG.PortBWidth {32} \
   CONFIG.Use_Custom_Output_Width {true} \
 ] $mult_64_4

  # Create instance: zero_point_five, and set properties
  set zero_point_five [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 zero_point_five ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0x00008000} \
   CONFIG.CONST_WIDTH {32} \
 ] $zero_point_five

  # Create port connections
  connect_bd_net -net a_1 [get_bd_ports a] [get_bd_pins delaypass_0/din]
  connect_bd_net -net arev_1 [get_bd_ports arev] [get_bd_pins delaypass_10/din]
  connect_bd_net -net c_add_0_S [get_bd_pins c_add_0/S] [get_bd_pins c_add_2/B]
  connect_bd_net -net c_add_1_S [get_bd_pins c_add_1/S] [get_bd_pins delaypass_11/din]
  connect_bd_net -net c_add_2_S [get_bd_pins c_add_2/S] [get_bd_pins c_sub_6/A]
  connect_bd_net -net c_add_4_S [get_bd_pins c_add_4/S] [get_bd_pins mult_64_4/B]
  connect_bd_net -net c_add_5_S [get_bd_pins c_add_5/S] [get_bd_pins mult_64_3/A]
  connect_bd_net -net c_add_6_S [get_bd_pins c_sub_6/S] [get_bd_pins mult_64_1/B]
  connect_bd_net -net c_pass_2_S [get_bd_pins c_add_2/A] [get_bd_pins delaypass_3/dout] [get_bd_pins delaypass_4/din]
  connect_bd_net -net clk_1 [get_bd_ports clk] [get_bd_pins c_add_0/CLK] [get_bd_pins c_add_1/CLK] [get_bd_pins c_add_2/CLK] [get_bd_pins c_add_4/CLK] [get_bd_pins c_add_5/CLK] [get_bd_pins c_sub_6/CLK] [get_bd_pins delaypass_0/clk] [get_bd_pins delaypass_1/clk] [get_bd_pins delaypass_10/clk] [get_bd_pins delaypass_11/clk] [get_bd_pins delaypass_12/clk] [get_bd_pins delaypass_13/clk] [get_bd_pins delaypass_2/clk] [get_bd_pins delaypass_3/clk] [get_bd_pins delaypass_4/clk] [get_bd_pins delaypass_5/clk] [get_bd_pins delaypass_6/clk] [get_bd_pins delaypass_7/clk] [get_bd_pins delaypass_8/clk] [get_bd_pins delaypass_9/clk] [get_bd_pins mult_64_1/CLK] [get_bd_pins mult_64_2_pip_2/CLK] [get_bd_pins mult_64_3/CLK] [get_bd_pins mult_64_4/CLK]
  connect_bd_net -net delaypass_0_dout [get_bd_pins delaypass_0/dout] [get_bd_pins delaypass_1/din]
  connect_bd_net -net delaypass_10_dout [get_bd_pins delaypass_10/dout] [get_bd_pins delaypass_12/din]
  connect_bd_net -net delaypass_11_dout [get_bd_pins c_sub_6/B] [get_bd_pins delaypass_11/dout]
  connect_bd_net -net delaypass_12_dout [get_bd_pins delaypass_12/dout] [get_bd_pins delaypass_13/din]
  connect_bd_net -net delaypass_13_dout [get_bd_pins delaypass_13/dout] [get_bd_pins mult_64_1/A]
  connect_bd_net -net delaypass_1_dout [get_bd_pins delaypass_1/dout] [get_bd_pins delaypass_2/din]
  connect_bd_net -net delaypass_2_dout [get_bd_pins delaypass_2/dout] [get_bd_pins mult_64_3/B]
  connect_bd_net -net delaypass_4_dout [get_bd_pins delaypass_4/dout] [get_bd_pins delaypass_5/din]
  connect_bd_net -net delaypass_5_dout [get_bd_pins delaypass_5/dout] [get_bd_pins delaypass_6/din]
  connect_bd_net -net delaypass_6_dout [get_bd_pins delaypass_6/dout] [get_bd_pins delaypass_7/din]
  connect_bd_net -net delaypass_7_dout [get_bd_pins delaypass_7/dout] [get_bd_pins mult_64_4/A]
  connect_bd_net -net delaypass_8_dout [get_bd_pins delaypass_8/dout] [get_bd_pins delaypass_9/din]
  connect_bd_net -net delaypass_9_dout [get_bd_pins c_add_5/A] [get_bd_pins delaypass_9/dout]
  connect_bd_net -net inc_1 [get_bd_ports inc] [get_bd_pins delaypass_3/din] [get_bd_pins mult_64_2_pip_2/B]
  connect_bd_net -net mult_64_1_P [get_bd_pins c_add_4/B] [get_bd_pins mult_64_1/P]
  connect_bd_net -net mult_64_2_P [get_bd_pins c_add_5/B] [get_bd_pins mult_64_2_pip_2/P]
  connect_bd_net -net mult_64_3_P [get_bd_pins c_add_4/A] [get_bd_pins mult_64_3/P]
  connect_bd_net -net mult_64_4_P [get_bd_ports o] [get_bd_pins mult_64_4/P]
  connect_bd_net -net x_1 [get_bd_ports x] [get_bd_pins c_add_0/A] [get_bd_pins c_add_0/B] [get_bd_pins delaypass_8/din]
  connect_bd_net -net xm_1 [get_bd_ports xm] [get_bd_pins c_add_1/A]
  connect_bd_net -net xp_1 [get_bd_ports xp] [get_bd_pins c_add_1/B]
  connect_bd_net -net zero_point_five_dout [get_bd_pins mult_64_2_pip_2/A] [get_bd_pins zero_point_five/dout]

  # Create address segments

  # Perform GUI Layout
  regenerate_bd_layout -layout_string {
   "ExpandedHierarchyInLayout":"",
   "guistr":"# # String gsaved with Nlview 7.0.19  2019-03-26 bk=1.5019 VDI=41 GEI=35 GUI=JA:9.0 TLS
#  -string -flagsOSRD
preplace port clk -pg 1 -lvl 0 -x -420 -y -520 -defaultsOSRD
preplace portBus o -pg 1 -lvl 7 -x 1360 -y -300 -defaultsOSRD
preplace portBus a -pg 1 -lvl 0 -x -420 -y -450 -defaultsOSRD
preplace portBus inc -pg 1 -lvl 0 -x -420 -y -290 -defaultsOSRD
preplace portBus arev -pg 1 -lvl 0 -x -420 -y 190 -defaultsOSRD
preplace portBus x -pg 1 -lvl 0 -x -420 -y 300 -defaultsOSRD
preplace portBus xm -pg 1 -lvl 0 -x -420 -y 430 -defaultsOSRD
preplace portBus xp -pg 1 -lvl 0 -x -420 -y 460 -defaultsOSRD
preplace inst c_add_0 -pg 1 -lvl 1 -x -40 -y 320 -defaultsOSRD
preplace inst c_add_1 -pg 1 -lvl 1 -x -40 -y 460 -defaultsOSRD -resize 140 116
preplace inst mult_64_2_pip_2 -pg 1 -lvl 2 -x 200 -y -100 -defaultsOSRD -resize 140 116
preplace inst zero_point_five -pg 1 -lvl 1 -x -40 -y -120 -defaultsOSRD
preplace inst mult_64_4 -pg 1 -lvl 6 -x 1080 -y -300 -defaultsOSRD -resize 140 116
preplace inst c_add_4 -pg 1 -lvl 5 -x 880 -y -100 -defaultsOSRD -resize 140 116
preplace inst mult_64_3 -pg 1 -lvl 4 -x 660 -y -100 -defaultsOSRD -resize 140 116
preplace inst mult_64_1 -pg 1 -lvl 4 -x 660 -y 180 -defaultsOSRD -resize 140 116
preplace inst c_add_5 -pg 1 -lvl 3 -x 440 -y -100 -defaultsOSRD -resize 140 116
preplace inst c_add_2 -pg 1 -lvl 2 -x 200 -y 320 -defaultsOSRD -resize 140 116
preplace inst c_sub_6 -pg 1 -lvl 3 -x 440 -y 310 -defaultsOSRD -resize 140 116
preplace inst delaypass_0 -pg 1 -lvl 1 -x -40 -y -460 -defaultsOSRD
preplace inst delaypass_1 -pg 1 -lvl 2 -x 200 -y -460 -defaultsOSRD -resize 160 96
preplace inst delaypass_2 -pg 1 -lvl 3 -x 440 -y -460 -defaultsOSRD -resize 160 96
preplace inst delaypass_3 -pg 1 -lvl 1 -x -40 -y -300 -defaultsOSRD -resize 160 96
preplace inst delaypass_4 -pg 1 -lvl 2 -x 200 -y -300 -defaultsOSRD -resize 160 96
preplace inst delaypass_5 -pg 1 -lvl 3 -x 440 -y -300 -defaultsOSRD -resize 160 96
preplace inst delaypass_6 -pg 1 -lvl 4 -x 660 -y -300 -defaultsOSRD -resize 160 96
preplace inst delaypass_7 -pg 1 -lvl 5 -x 880 -y -300 -defaultsOSRD -resize 160 96
preplace inst delaypass_8 -pg 1 -lvl 1 -x -40 -y 60 -defaultsOSRD -resize 160 96
preplace inst delaypass_9 -pg 1 -lvl 2 -x 200 -y 60 -defaultsOSRD -resize 160 96
preplace inst delaypass_10 -pg 1 -lvl 1 -x -40 -y 180 -defaultsOSRD -resize 160 96
preplace inst delaypass_11 -pg 1 -lvl 2 -x 200 -y 460 -defaultsOSRD -resize 160 96
preplace inst delaypass_12 -pg 1 -lvl 2 -x 200 -y 180 -defaultsOSRD -resize 160 96
preplace inst delaypass_13 -pg 1 -lvl 3 -x 440 -y 180 -defaultsOSRD -resize 160 96
preplace netloc clk_1 1 0 6 -390 -530 80 -530 310 -370 560 -370 770 -370 980
preplace netloc zero_point_five_dout 1 1 1 60 -120n
preplace netloc mult_64_4_P 1 6 1 N -300
preplace netloc c_add_4_S 1 5 1 980 -280n
preplace netloc mult_64_3_P 1 4 1 760 -120n
preplace netloc mult_64_1_P 1 4 1 780 -100n
preplace netloc mult_64_2_P 1 2 1 N -100
preplace netloc c_add_5_S 1 3 1 N -100
preplace netloc c_add_0_S 1 1 1 N 320
preplace netloc c_add_6_S 1 3 1 550 200n
preplace netloc c_add_2_S 1 2 1 320 290n
preplace netloc xm_1 1 0 1 -400J 430n
preplace netloc xp_1 1 0 1 NJ 460
preplace netloc x_1 1 0 1 -380J 70n
preplace netloc c_pass_2_S 1 1 1 70 -300n
preplace netloc delaypass_1_dout 1 2 1 330 -460n
preplace netloc delaypass_0_dout 1 1 1 90 -460n
preplace netloc delaypass_2_dout 1 3 1 550 -460n
preplace netloc a_1 1 0 1 N -450
preplace netloc inc_1 1 0 2 -380 -370 90
preplace netloc delaypass_4_dout 1 2 1 300 -300n
preplace netloc delaypass_5_dout 1 3 1 540 -300n
preplace netloc delaypass_7_dout 1 5 1 N -300
preplace netloc delaypass_6_dout 1 4 1 760 -300n
preplace netloc delaypass_9_dout 1 2 1 300 -120n
preplace netloc delaypass_8_dout 1 1 1 60 60n
preplace netloc arev_1 1 0 1 N 190
preplace netloc delaypass_11_dout 1 2 1 330 310n
preplace netloc c_add_1_S 1 1 1 80 460n
preplace netloc delaypass_10_dout 1 1 1 60 180n
preplace netloc delaypass_13_dout 1 3 1 N 180
preplace netloc delaypass_12_dout 1 2 1 300 180n
levelinfo -pg 1 -420 -40 200 440 660 880 1080 1360
pagesize -pg 1 -db -bbox -sgen -540 -770 1460 630
"
}

  # Restore current instance
  current_bd_instance $oldCurInst

  validate_bd_design
  save_bd_design
  close_bd_design $design_name 
}
# End of cr_bd_bd_math()
cr_bd_bd_math ""
set_property REGISTERED_WITH_MANAGER "1" [get_files bd_math.bd ] 
set_property SYNTH_CHECKPOINT_MODE "Hierarchical" [get_files bd_math.bd ] 

# Create 'synth_1' run (if not found)
if {[string equal [get_runs -quiet synth_1] ""]} {
    create_run -name synth_1 -part xc7z020clg400-1 -flow {Vivado Synthesis 2019} -strategy "Vivado Synthesis Defaults" -report_strategy {No Reports} -constrset constrs_1
} else {
  set_property strategy "Vivado Synthesis Defaults" [get_runs synth_1]
  set_property flow "Vivado Synthesis 2019" [get_runs synth_1]
}
set obj [get_runs synth_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Synthesis Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'synth_1_synth_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0] "" ] } {
  create_report_config -report_name synth_1_synth_report_utilization_0 -report_type report_utilization:1.0 -steps synth_design -runs synth_1
}
set obj [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0]
if { $obj != "" } {

}
set obj [get_runs synth_1]
set_property -name "needs_refresh" -value "1" -objects $obj
set_property -name "strategy" -value "Vivado Synthesis Defaults" -objects $obj

# Create 'blk_mem_gen_1_synth_1' run (if not found)
if {[string equal [get_runs -quiet blk_mem_gen_1_synth_1] ""]} {
    create_run -name blk_mem_gen_1_synth_1 -part xc7z020clg400-1 -flow {Vivado Synthesis 2019} -strategy "Vivado Synthesis Defaults" -report_strategy {No Reports} -constrset blk_mem_gen_1
} else {
  set_property strategy "Vivado Synthesis Defaults" [get_runs blk_mem_gen_1_synth_1]
  set_property flow "Vivado Synthesis 2019" [get_runs blk_mem_gen_1_synth_1]
}
set obj [get_runs blk_mem_gen_1_synth_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Synthesis Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'blk_mem_gen_1_synth_1_synth_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs blk_mem_gen_1_synth_1] blk_mem_gen_1_synth_1_synth_report_utilization_0] "" ] } {
  create_report_config -report_name blk_mem_gen_1_synth_1_synth_report_utilization_0 -report_type report_utilization:1.0 -steps synth_design -runs blk_mem_gen_1_synth_1
}
set obj [get_report_configs -of_objects [get_runs blk_mem_gen_1_synth_1] blk_mem_gen_1_synth_1_synth_report_utilization_0]
if { $obj != "" } {

}
set obj [get_runs blk_mem_gen_1_synth_1]
set_property -name "constrset" -value "blk_mem_gen_1" -objects $obj
set_property -name "strategy" -value "Vivado Synthesis Defaults" -objects $obj

# set the current synth run
current_run -synthesis [get_runs synth_1]

# Create 'impl_1' run (if not found)
if {[string equal [get_runs -quiet impl_1] ""]} {
    create_run -name impl_1 -part xc7z020clg400-1 -flow {Vivado Implementation 2019} -strategy "Vivado Implementation Defaults" -report_strategy {No Reports} -constrset constrs_1 -parent_run synth_1
} else {
  set_property strategy "Vivado Implementation Defaults" [get_runs impl_1]
  set_property flow "Vivado Implementation 2019" [get_runs impl_1]
}
set obj [get_runs impl_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Implementation Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'impl_1_init_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_init_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps init_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_opt_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_drc_0 -report_type report_drc:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_place_report_io_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0] "" ] } {
  create_report_config -report_name impl_1_place_report_io_0 -report_type report_io:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0] "" ] } {
  create_report_config -report_name impl_1_place_report_utilization_0 -report_type report_utilization:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_control_sets_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0] "" ] } {
  create_report_config -report_name impl_1_place_report_control_sets_0 -report_type report_control_sets:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0]
if { $obj != "" } {
set_property -name "options.verbose" -value "1" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_1' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_1 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_place_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_post_place_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_place_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_place_power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_route_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_route_report_drc_0 -report_type report_drc:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_methodology_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0] "" ] } {
  create_report_config -report_name impl_1_route_report_methodology_0 -report_type report_methodology:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_power_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0] "" ] } {
  create_report_config -report_name impl_1_route_report_power_0 -report_type report_power:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_route_status_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0] "" ] } {
  create_report_config -report_name impl_1_route_report_route_status_0 -report_type report_route_status:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_route_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_route_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_route_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_clock_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0] "" ] } {
  create_report_config -report_name impl_1_route_report_clock_utilization_0 -report_type report_clock_utilization:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_route_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
set obj [get_runs impl_1]
set_property -name "strategy" -value "Vivado Implementation Defaults" -objects $obj
set_property -name "steps.write_bitstream.args.readback_file" -value "0" -objects $obj
set_property -name "steps.write_bitstream.args.verbose" -value "0" -objects $obj

# Create 'blk_mem_gen_1_impl_1' run (if not found)
if {[string equal [get_runs -quiet blk_mem_gen_1_impl_1] ""]} {
    create_run -name blk_mem_gen_1_impl_1 -part xc7z020clg400-1 -flow {Vivado Implementation 2019} -strategy "Vivado Implementation Defaults" -report_strategy {No Reports} -constrset blk_mem_gen_1 -parent_run blk_mem_gen_1_synth_1
} else {
  set_property strategy "Vivado Implementation Defaults" [get_runs blk_mem_gen_1_impl_1]
  set_property flow "Vivado Implementation 2019" [get_runs blk_mem_gen_1_impl_1]
}
set obj [get_runs blk_mem_gen_1_impl_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Implementation Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'blk_mem_gen_1_impl_1_init_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_init_report_timing_summary_0] "" ] } {
  create_report_config -report_name blk_mem_gen_1_impl_1_init_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps init_design -runs blk_mem_gen_1_impl_1
}
set obj [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_init_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'blk_mem_gen_1_impl_1_opt_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_opt_report_drc_0] "" ] } {
  create_report_config -report_name blk_mem_gen_1_impl_1_opt_report_drc_0 -report_type report_drc:1.0 -steps opt_design -runs blk_mem_gen_1_impl_1
}
set obj [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_opt_report_drc_0]
if { $obj != "" } {

}
# Create 'blk_mem_gen_1_impl_1_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name blk_mem_gen_1_impl_1_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps opt_design -runs blk_mem_gen_1_impl_1
}
set obj [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'blk_mem_gen_1_impl_1_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name blk_mem_gen_1_impl_1_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps power_opt_design -runs blk_mem_gen_1_impl_1
}
set obj [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'blk_mem_gen_1_impl_1_place_report_io_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_place_report_io_0] "" ] } {
  create_report_config -report_name blk_mem_gen_1_impl_1_place_report_io_0 -report_type report_io:1.0 -steps place_design -runs blk_mem_gen_1_impl_1
}
set obj [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_place_report_io_0]
if { $obj != "" } {

}
# Create 'blk_mem_gen_1_impl_1_place_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_place_report_utilization_0] "" ] } {
  create_report_config -report_name blk_mem_gen_1_impl_1_place_report_utilization_0 -report_type report_utilization:1.0 -steps place_design -runs blk_mem_gen_1_impl_1
}
set obj [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_place_report_utilization_0]
if { $obj != "" } {

}
# Create 'blk_mem_gen_1_impl_1_place_report_control_sets_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_place_report_control_sets_0] "" ] } {
  create_report_config -report_name blk_mem_gen_1_impl_1_place_report_control_sets_0 -report_type report_control_sets:1.0 -steps place_design -runs blk_mem_gen_1_impl_1
}
set obj [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_place_report_control_sets_0]
if { $obj != "" } {
set_property -name "options.verbose" -value "1" -objects $obj

}
# Create 'blk_mem_gen_1_impl_1_place_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_place_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name blk_mem_gen_1_impl_1_place_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps place_design -runs blk_mem_gen_1_impl_1
}
set obj [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_place_report_incremental_reuse_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'blk_mem_gen_1_impl_1_place_report_incremental_reuse_1' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_place_report_incremental_reuse_1] "" ] } {
  create_report_config -report_name blk_mem_gen_1_impl_1_place_report_incremental_reuse_1 -report_type report_incremental_reuse:1.0 -steps place_design -runs blk_mem_gen_1_impl_1
}
set obj [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_place_report_incremental_reuse_1]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'blk_mem_gen_1_impl_1_place_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_place_report_timing_summary_0] "" ] } {
  create_report_config -report_name blk_mem_gen_1_impl_1_place_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps place_design -runs blk_mem_gen_1_impl_1
}
set obj [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_place_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'blk_mem_gen_1_impl_1_post_place_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_post_place_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name blk_mem_gen_1_impl_1_post_place_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_place_power_opt_design -runs blk_mem_gen_1_impl_1
}
set obj [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_post_place_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'blk_mem_gen_1_impl_1_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name blk_mem_gen_1_impl_1_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps phys_opt_design -runs blk_mem_gen_1_impl_1
}
set obj [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'blk_mem_gen_1_impl_1_route_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_route_report_drc_0] "" ] } {
  create_report_config -report_name blk_mem_gen_1_impl_1_route_report_drc_0 -report_type report_drc:1.0 -steps route_design -runs blk_mem_gen_1_impl_1
}
set obj [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_route_report_drc_0]
if { $obj != "" } {

}
# Create 'blk_mem_gen_1_impl_1_route_report_methodology_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_route_report_methodology_0] "" ] } {
  create_report_config -report_name blk_mem_gen_1_impl_1_route_report_methodology_0 -report_type report_methodology:1.0 -steps route_design -runs blk_mem_gen_1_impl_1
}
set obj [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_route_report_methodology_0]
if { $obj != "" } {

}
# Create 'blk_mem_gen_1_impl_1_route_report_power_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_route_report_power_0] "" ] } {
  create_report_config -report_name blk_mem_gen_1_impl_1_route_report_power_0 -report_type report_power:1.0 -steps route_design -runs blk_mem_gen_1_impl_1
}
set obj [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_route_report_power_0]
if { $obj != "" } {

}
# Create 'blk_mem_gen_1_impl_1_route_report_route_status_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_route_report_route_status_0] "" ] } {
  create_report_config -report_name blk_mem_gen_1_impl_1_route_report_route_status_0 -report_type report_route_status:1.0 -steps route_design -runs blk_mem_gen_1_impl_1
}
set obj [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_route_report_route_status_0]
if { $obj != "" } {

}
# Create 'blk_mem_gen_1_impl_1_route_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_route_report_timing_summary_0] "" ] } {
  create_report_config -report_name blk_mem_gen_1_impl_1_route_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps route_design -runs blk_mem_gen_1_impl_1
}
set obj [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_route_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'blk_mem_gen_1_impl_1_route_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_route_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name blk_mem_gen_1_impl_1_route_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps route_design -runs blk_mem_gen_1_impl_1
}
set obj [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_route_report_incremental_reuse_0]
if { $obj != "" } {

}
# Create 'blk_mem_gen_1_impl_1_route_report_clock_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_route_report_clock_utilization_0] "" ] } {
  create_report_config -report_name blk_mem_gen_1_impl_1_route_report_clock_utilization_0 -report_type report_clock_utilization:1.0 -steps route_design -runs blk_mem_gen_1_impl_1
}
set obj [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_route_report_clock_utilization_0]
if { $obj != "" } {

}
# Create 'blk_mem_gen_1_impl_1_route_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_route_report_bus_skew_0] "" ] } {
  create_report_config -report_name blk_mem_gen_1_impl_1_route_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps route_design -runs blk_mem_gen_1_impl_1
}
set obj [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_route_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'blk_mem_gen_1_impl_1_post_route_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_post_route_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name blk_mem_gen_1_impl_1_post_route_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_route_phys_opt_design -runs blk_mem_gen_1_impl_1
}
set obj [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_post_route_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'blk_mem_gen_1_impl_1_post_route_phys_opt_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_post_route_phys_opt_report_bus_skew_0] "" ] } {
  create_report_config -report_name blk_mem_gen_1_impl_1_post_route_phys_opt_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps post_route_phys_opt_design -runs blk_mem_gen_1_impl_1
}
set obj [get_report_configs -of_objects [get_runs blk_mem_gen_1_impl_1] blk_mem_gen_1_impl_1_post_route_phys_opt_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
set obj [get_runs blk_mem_gen_1_impl_1]
set_property -name "constrset" -value "blk_mem_gen_1" -objects $obj
set_property -name "include_in_archive" -value "0" -objects $obj
set_property -name "strategy" -value "Vivado Implementation Defaults" -objects $obj
set_property -name "steps.write_bitstream.args.readback_file" -value "0" -objects $obj
set_property -name "steps.write_bitstream.args.verbose" -value "0" -objects $obj

# set the current impl run
current_run -implementation [get_runs impl_1]

puts "INFO: Project created:${_xil_proj_name_}"
# Create 'drc_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "drc_1" ] ] ""]} {
create_dashboard_gadget -name {drc_1} -type drc
}
set obj [get_dashboard_gadgets [ list "drc_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_drc_0" -objects $obj

# Create 'methodology_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "methodology_1" ] ] ""]} {
create_dashboard_gadget -name {methodology_1} -type methodology
}
set obj [get_dashboard_gadgets [ list "methodology_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_methodology_0" -objects $obj

# Create 'power_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "power_1" ] ] ""]} {
create_dashboard_gadget -name {power_1} -type power
}
set obj [get_dashboard_gadgets [ list "power_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_power_0" -objects $obj

# Create 'timing_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "timing_1" ] ] ""]} {
create_dashboard_gadget -name {timing_1} -type timing
}
set obj [get_dashboard_gadgets [ list "timing_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_timing_summary_0" -objects $obj

# Create 'utilization_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_1" ] ] ""]} {
create_dashboard_gadget -name {utilization_1} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_1" ] ]
set_property -name "reports" -value "synth_1#synth_1_synth_report_utilization_0" -objects $obj
set_property -name "run.step" -value "synth_design" -objects $obj
set_property -name "run.type" -value "synthesis" -objects $obj

# Create 'utilization_2' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_2" ] ] ""]} {
create_dashboard_gadget -name {utilization_2} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_2" ] ]
set_property -name "reports" -value "impl_1#impl_1_place_report_utilization_0" -objects $obj

move_dashboard_gadget -name {utilization_1} -row 0 -col 0
move_dashboard_gadget -name {power_1} -row 1 -col 0
move_dashboard_gadget -name {drc_1} -row 2 -col 0
move_dashboard_gadget -name {timing_1} -row 0 -col 1
move_dashboard_gadget -name {utilization_2} -row 1 -col 1
move_dashboard_gadget -name {methodology_1} -row 2 -col 1
